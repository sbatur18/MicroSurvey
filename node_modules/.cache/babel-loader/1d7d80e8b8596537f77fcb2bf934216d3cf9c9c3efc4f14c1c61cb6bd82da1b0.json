{"ast":null,"code":"var _jsxFileName = \"/Users/numan/Desktop/exp/src/App.js\",\n  _s2 = $RefreshSig$();\nimport './App.css';\nimport { StyledMainCard } from './Components/MainCard-style';\nimport { useState } from \"react\";\nimport { getQuestions } from './integration.ts';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  const [isLoading, setIsLoading] = useState(true);\n  const [userID, setUserID] = useState('0');\n  const [data, setData] = useState(null);\n  const [surveyID, setSurveyId] = useState(null);\n  const [numberQuestions, setNumberQuestions] = useState(0);\n  const restartFunction = mood => {\n    setIsLoading(mood);\n  };\n  window.addEventListener('message', function (event) {\n    if (event.data.source === \"survey-parent\") {\n      var _s = $RefreshSig$();\n      setUserID(event.data.value);\n      _s(getQuestions(event.data.value).then(_s(dataFetched => {\n        _s();\n        setData(dataFetched.questions);\n        setSurveyId(dataFetched.surveyId);\n        setIsLoading(false);\n        if (dataFetched.questions) {\n          setNumberQuestions(dataFetched.questions.length);\n          var valueDict = {};\n          for (let i = 0; i < numberQuestions; i++) {\n            valueDict[i] = \"\";\n          }\n          var validationDict = {\n            \"SHORT_ANSWER\": Yup.string().max(50, \"Must be 50 characters of less.\"),\n            \"LONG_ANSWER\": Yup.string().max(1000, \"Must be 10000 characters of less.\")\n          };\n          var schema = {};\n          for (let i = 0; i < numberQuestions; i++) {\n            schema[i] = validationDict[data[i].questionType];\n          }\n          const formik = useFormik({\n            initialValues: valueDict,\n            validationSchema: Yup.object().shape(schema)\n          });\n        } else {\n          setNumberQuestions(0);\n        }\n      }, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n        return [useFormik];\n      })), \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n        return [useFormik];\n      });\n    }\n  }, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-div\",\n    children: /*#__PURE__*/_jsxDEV(StyledMainCard, {\n      isLoading: isLoading,\n      data: data,\n      numberQuestions: numberQuestions,\n      userID: userID,\n      surveyID: surveyID,\n      restartFunction: restartFunction,\n      formik: formik\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n}\n_s2(App, \"C9IonIKja8srTAXAm9bUGJprgJQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["StyledMainCard","useState","getQuestions","Yup","useFormik","jsxDEV","_jsxDEV","App","_s2","isLoading","setIsLoading","userID","setUserID","data","setData","surveyID","setSurveyId","numberQuestions","setNumberQuestions","restartFunction","mood","window","addEventListener","event","source","_s","$RefreshSig$","value","then","dataFetched","questions","surveyId","length","valueDict","i","validationDict","string","max","schema","questionType","formik","initialValues","validationSchema","object","shape","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/numan/Desktop/exp/src/App.js"],"sourcesContent":["import './App.css';\nimport { StyledMainCard } from './Components/MainCard-style';\nimport { useState } from \"react\";\nimport { getQuestions } from './integration.ts'\nimport * as Yup from 'yup'\nimport { useFormik } from 'formik'\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true)\n  const [userID, setUserID] = useState('0')\n  const [data, setData] = useState(null)\n  const [surveyID, setSurveyId] = useState(null)\n  const [numberQuestions, setNumberQuestions] = useState(0)\n\n  const restartFunction = (mood) => {\n    setIsLoading(mood)\n  }\n\n  window.addEventListener('message', function(event) {\n    if (event.data.source === \"survey-parent\" ) {\n      setUserID(event.data.value)\n      getQuestions(event.data.value)\n      .then(dataFetched => {\n        setData(dataFetched.questions)\n        setSurveyId(dataFetched.surveyId)\n        setIsLoading(false)\n        if (dataFetched.questions) {\n          setNumberQuestions(dataFetched.questions.length)\n          var valueDict = {}\n          for (let i = 0; i<numberQuestions; i++) {\n              valueDict[i] = \"\"\n          }\n          var validationDict = {\n              \"SHORT_ANSWER\" : Yup.string()\n                  .max(50, \"Must be 50 characters of less.\"),\n              \"LONG_ANSWER\" : Yup.string()\n                  .max(1000, \"Must be 10000 characters of less.\"),\n          }\n          var schema = {}\n          for (let i = 0; i < numberQuestions; i++) {\n              schema[i] = validationDict[data[i].questionType]\n          }\n\n          const formik = useFormik({\n              initialValues : valueDict,\n              validationSchema : Yup.object().shape(schema),\n          })\n        } else {\n          setNumberQuestions(0)\n        }\n      })\n    }\n  }, false);\n\n\n  return (\n      \n      <div className='main-div'>\n        {<StyledMainCard isLoading={isLoading} data={data} numberQuestions={numberQuestions} userID={userID} surveyID={surveyID} restartFunction={restartFunction} formik={formik}></StyledMainCard>}\n      </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}