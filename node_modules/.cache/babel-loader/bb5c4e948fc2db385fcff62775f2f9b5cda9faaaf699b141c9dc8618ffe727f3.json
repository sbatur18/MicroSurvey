{"ast":null,"code":"import axios from 'axios';\nconst serverUrl = \"https://survey-api-dev.corp.getcentro.com/jsonrpc\";\n\n// Basically the input (request) format of calling all our API functions\n\nexport async function getQuestions(userID) {\n  var _response$data$result;\n  const request = {\n    jsonrpc: '2.0',\n    method: 'getSurveyForUser',\n    // This is the name of the function you want to use in the API\n    params: {\n      'userId': userID\n    },\n    // This is the input to the function, has to match the type getSurveyForUserRequest\n    id: 1\n  };\n  const response = await axios.post(serverUrl, request);\n  if (response.data.error) {\n    throw new Error(response.data.error.message);\n  }\n  if (((_response$data$result = response.data.result) === null || _response$data$result === void 0 ? void 0 : _response$data$result.questions) == null) {\n    return [];\n  } else {\n    return response.data.result.questions;\n  }\n}\nasync function saveQuestions(surveyID, userID, answers) {\n  var _response$data, _response$data$result2;\n  const request = {\n    jsonrpc: '2.0',\n    method: 'saveResponse',\n    params: {\n      'surveyId': surveyID,\n      'userId': userID,\n      'answers': answers\n    },\n    id: 1\n  };\n  const response = await axios.post(serverUrl, request);\n  if (response.data.error) {\n    throw new Error(response.data.error.message);\n  }\n  return response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$result2 = _response$data.result) === null || _response$data$result2 === void 0 ? void 0 : _response$data$result2.message;\n}","map":{"version":3,"names":["axios","serverUrl","getQuestions","userID","_response$data$result","request","jsonrpc","method","params","id","response","post","data","error","Error","message","result","questions","saveQuestions","surveyID","answers","_response$data","_response$data$result2"],"sources":["/Users/numan/Desktop/csc301/project/src/integration.ts"],"sourcesContent":["import axios from 'axios';\n\nimport {GetSurveyForUserRequest, GetSurveyForUserResponse, Question, SaveResponseRequest, SaveResponseResponse} from './sba-survey-api-def';\n\nconst serverUrl = \"https://survey-api-dev.corp.getcentro.com/jsonrpc\";\n\n// Basically the input (request) format of calling all our API functions\ninterface JsonRpcRequest<ReqT> {\n    jsonrpc: string;\n    method: string;\n    params: ReqT;\n    id: number;\n  }\n  \n  // The output format\n  interface JsonRpcResponse<ResT> {\n    jsonrpc: string;\n    result?: ResT;\n    error?: {\n      code: number;\n      message: string;\n      data?: any;\n    };\n    id: number;\n  }\n\n\nexport async function getQuestions(userID:string): Promise<Array<Question> | null> {\n    const request: JsonRpcRequest<GetSurveyForUserRequest> = {\n        jsonrpc: '2.0',\n        method: 'getSurveyForUser', // This is the name of the function you want to use in the API\n        params: {'userId': userID}, // This is the input to the function, has to match the type getSurveyForUserRequest\n        id: 1,\n      };\n\n      const response = await axios.post<JsonRpcResponse<GetSurveyForUserResponse>>(serverUrl, request);\n\n      if (response.data.error) {\n        throw new Error(response.data.error.message);\n      }\n\n      if (response.data.result?.questions == null){\n        return [];\n      } else {\n        return response.data.result.questions;\n      }\n}\n\n\nasync function saveQuestions(surveyID:string, userID:string, answers:Array<string>): Promise<String> {\n    const request: JsonRpcRequest<SaveResponseRequest> = {\n        jsonrpc: '2.0',\n        method: 'saveResponse', \n        params: {'surveyId': surveyID, 'userId': userID, 'answers': answers}, \n        id: 1,\n      };\n\n\n    const response = await axios.post<JsonRpcResponse<SaveResponseResponse>>(serverUrl, request);\n    \n    if (response.data.error) {\n        throw new Error(response.data.error.message);\n    }\n\n    return response?.data?.result?.message!;\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,MAAMC,SAAS,GAAG,mDAAmD;;AAErE;;AAqBA,OAAO,eAAeC,YAAYA,CAACC,MAAa,EAAmC;EAAA,IAAAC,qBAAA;EAC/E,MAAMC,OAAgD,GAAG;IACrDC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE,kBAAkB;IAAE;IAC5BC,MAAM,EAAE;MAAC,QAAQ,EAAEL;IAAM,CAAC;IAAE;IAC5BM,EAAE,EAAE;EACN,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAA4CV,SAAS,EAAEI,OAAO,CAAC;EAEhG,IAAIK,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;IACvB,MAAM,IAAIC,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACC,KAAK,CAACE,OAAO,CAAC;EAC9C;EAEA,IAAI,EAAAX,qBAAA,GAAAM,QAAQ,CAACE,IAAI,CAACI,MAAM,cAAAZ,qBAAA,uBAApBA,qBAAA,CAAsBa,SAAS,KAAI,IAAI,EAAC;IAC1C,OAAO,EAAE;EACX,CAAC,MAAM;IACL,OAAOP,QAAQ,CAACE,IAAI,CAACI,MAAM,CAACC,SAAS;EACvC;AACN;AAGA,eAAeC,aAAaA,CAACC,QAAe,EAAEhB,MAAa,EAAEiB,OAAqB,EAAmB;EAAA,IAAAC,cAAA,EAAAC,sBAAA;EACjG,MAAMjB,OAA4C,GAAG;IACjDC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE,cAAc;IACtBC,MAAM,EAAE;MAAC,UAAU,EAAEW,QAAQ;MAAE,QAAQ,EAAEhB,MAAM;MAAE,SAAS,EAAEiB;IAAO,CAAC;IACpEX,EAAE,EAAE;EACN,CAAC;EAGH,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAwCV,SAAS,EAAEI,OAAO,CAAC;EAE5F,IAAIK,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;IACrB,MAAM,IAAIC,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACC,KAAK,CAACE,OAAO,CAAC;EAChD;EAEA,OAAOL,QAAQ,aAARA,QAAQ,wBAAAW,cAAA,GAARX,QAAQ,CAAEE,IAAI,cAAAS,cAAA,wBAAAC,sBAAA,GAAdD,cAAA,CAAgBL,MAAM,cAAAM,sBAAA,uBAAtBA,sBAAA,CAAwBP,OAAO;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}