{"ast":null,"code":"import axios from 'axios';\nconst serverUrl = \"https://survey-api-dev.corp.getcentro.com/jsonrpc\";\n\n// Basically the input (request) format of calling all our API functions\n\nexport async function getQuestions(userID) {\n  const request = {\n    jsonrpc: '2.0',\n    method: 'getSurveyForUserHandler',\n    // This is the name of the function you want to use in the API\n    params: {\n      'userId': userID\n    },\n    // This is the input to the function, has to match the type getSurveyForUserRequest\n    id: 1\n  };\n  const response = await axios.post(serverUrl, request);\n  if (response.data.error) {\n    console.log(response.data.error.message);\n    return {\n      surveyId: null,\n      questions: null\n    };\n  } else {\n    return {\n      surveyId: response.data.result.surveyId,\n      questions: response.data.result.questions\n    };\n  }\n}\nexport async function saveQuestions(surveyID, userID, answers) {\n  const request = {\n    jsonrpc: '2.0',\n    method: 'saveResponseHandler',\n    params: {\n      'surveyId': surveyID,\n      'userId': userID,\n      'answers': answers\n    },\n    id: 1\n  };\n  const response = await axios.post(serverUrl, request);\n  if (response.data.error) {\n    console.log(response.data.error.message);\n    return \"Error\";\n  } else {\n    return response.data.result.message;\n  }\n}","map":{"version":3,"names":["axios","serverUrl","getQuestions","userID","request","jsonrpc","method","params","id","response","post","data","error","console","log","message","surveyId","questions","result","saveQuestions","surveyID","answers"],"sources":["/Users/numan/Desktop/exp/src/integration.ts"],"sourcesContent":["import axios from 'axios';\n\nimport {GetSurveyForUserRequest, GetSurveyForUserResponse, Question, SaveResponseRequest, SaveResponseResponse} from './sba-survey-api-def';\n\nconst serverUrl = \"https://survey-api-dev.corp.getcentro.com/jsonrpc\";\n\n// Basically the input (request) format of calling all our API functions\ninterface JsonRpcRequest<ReqT> {\n    jsonrpc: string;\n    method: string;\n    params: ReqT;\n    id: number;\n  }\n  \n// The output format\ninterface JsonRpcResponse<ResT> {\n    jsonrpc: string;\n    id: number;\n    result: ResT;\n    error?: {\n      code: number;\n      message: string;\n      data?: any;\n    };\n  }\n\nexport async function getQuestions(userID: string): Promise<{surveyId: string | null, questions: Array<Question> | null}> {\n  const request: JsonRpcRequest<GetSurveyForUserRequest> = {\n    jsonrpc: '2.0',\n    method: 'getSurveyForUserHandler', // This is the name of the function you want to use in the API\n    params: {'userId': userID}, // This is the input to the function, has to match the type getSurveyForUserRequest\n    id: 1,\n  };\n  const response = await axios.post<JsonRpcResponse<GetSurveyForUserResponse>>(serverUrl, request);\n\n  if (response.data.error){\n    console.log(response.data.error.message);\n    return {surveyId: null, questions: null};\n  } else {\n    return {surveyId: response.data.result.surveyId, questions: response.data.result.questions};\n  }\n}\n\n\nexport async function saveQuestions(surveyID:string, userID:string, answers:Array<string>): Promise<String> {\n  const request: JsonRpcRequest<SaveResponseRequest> = {\n      jsonrpc: '2.0',\n      method: 'saveResponseHandler', \n      params: {'surveyId': surveyID, 'userId': userID, 'answers': answers}, \n      id: 1,\n    };\n  const response = await axios.post<JsonRpcResponse<SaveResponseResponse>>(serverUrl, request);\n\n  if (response.data.error){\n    console.log(response.data.error.message);\n    return \"Error\";\n  } else {\n    return response.data.result.message;\n  }\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAIzB,MAAMC,SAAS,GAAG,mDAAmD;;AAErE;;AAoBA,OAAO,eAAeC,YAAYA,CAACC,MAAc,EAAyE;EACxH,MAAMC,OAAgD,GAAG;IACvDC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE,yBAAyB;IAAE;IACnCC,MAAM,EAAE;MAAC,QAAQ,EAAEJ;IAAM,CAAC;IAAE;IAC5BK,EAAE,EAAE;EACN,CAAC;EACD,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAA4CT,SAAS,EAAEG,OAAO,CAAC;EAEhG,IAAIK,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAC;IACtBC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAACG,OAAO,CAAC;IACxC,OAAO;MAACC,QAAQ,EAAE,IAAI;MAAEC,SAAS,EAAE;IAAI,CAAC;EAC1C,CAAC,MAAM;IACL,OAAO;MAACD,QAAQ,EAAEP,QAAQ,CAACE,IAAI,CAACO,MAAM,CAACF,QAAQ;MAAEC,SAAS,EAAER,QAAQ,CAACE,IAAI,CAACO,MAAM,CAACD;IAAS,CAAC;EAC7F;AACF;AAGA,OAAO,eAAeE,aAAaA,CAACC,QAAe,EAAEjB,MAAa,EAAEkB,OAAqB,EAAmB;EAC1G,MAAMjB,OAA4C,GAAG;IACjDC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE,qBAAqB;IAC7BC,MAAM,EAAE;MAAC,UAAU,EAAEa,QAAQ;MAAE,QAAQ,EAAEjB,MAAM;MAAE,SAAS,EAAEkB;IAAO,CAAC;IACpEb,EAAE,EAAE;EACN,CAAC;EACH,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAwCT,SAAS,EAAEG,OAAO,CAAC;EAE5F,IAAIK,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAC;IACtBC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAACG,OAAO,CAAC;IACxC,OAAO,OAAO;EAChB,CAAC,MAAM;IACL,OAAON,QAAQ,CAACE,IAAI,CAACO,MAAM,CAACH,OAAO;EACrC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}